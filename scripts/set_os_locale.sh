#!/bin/sh
#set -e
#set -x

NTP_SERVER="time.cloudflare.com"
NTP_SERVICE_NAME=""
NTP_CONF_FILE=""

global_code_failure=50
global_code_param_missing=11
global_code_param_invalid=12
global_code_no_access=41
global_code_not_found=44

print_message(){
  # -eq/-ne/-gt/-lt/-ge/-le
  echo "$1"
}

clean_up(){
  return 0
}

exit_now(){
  code="$1"
  msg="$2"
  clean_up $code
  if [ $code -eq 0 ]; then
    print_message "任务结束：成功。"
  else
    print_message "任务结束：失败（error=$code, message=$msg）"
  fi
  exit $code
}

exit_on_code_failure(){
  code="$1"
  msg="$2"
  if [ $code -ne 0 ]; then
    exit_now "$code" "$msg"
  fi
  return 0
}

command_exists() {
  # command -v $1 > /dev/null 2>&1
  command -v "$@" > /dev/null 2>&1
  # return $?
}

set_os_time_zone() {
  param_time_zone="$1"
  if [ -z "$param_time_zone" ]; then
    exit_now "$global_code_failure" "时区名称不能为空，请使用正确的时区名称，如：Asia/Shanghai"
  fi

  print_message "准备设置系统时区：$param_time_zone"
  # 查看当前时区：timedatectl | grep "Time zone"
  #                 Time zone: Asia/Shanghai (CST, +0800)
  time_zone_root_path=$(readlink -f /etc/localtime)
  #time_zone_root_path=$(readlink -f "${time_zone_root_path}/../../")
  #time_zone_root_path=$(dirname "$time_zone_root_path")
  #time_zone_root_path=$(dirname "$time_zone_root_path")
  #tz_path="${time_zone_root_path}/$param_time_zone"
  time_zone_root_path="/usr/share/zoneinfo"
  tz_path="${time_zone_root_path}/$param_time_zone"
  if [ ! -f "$tz_path" ]; then
    exit_now "$global_code_failure" "时区名称格式错误，文件 $tz_path 不存在，请使用正确的时区名称，如：Asia/Shanghai"
  fi

  # 优先使用 timedatectl
  if command_exists timedatectl; then
      sudo timedatectl set-timezone "$param_time_zone"
  else
      sudo ln -sf "$tz_path" /etc/localtime
  fi
  exit_on_code_failure "$?" "系统时区设置失败：${param_time_zone}"
  print_message "系统时区设置成功：$param_time_zone"
}

set_os_language() {
  param_language="$1"
  if [ -z "$param_language" ]; then
    exit_now "$global_code_failure" "系统语言不能为空，请使用正确的系统语言格式，如：zh_CN.utf8【中文】、en_US.utf8【英文】"
  fi

  print_message "准备设置系统语言：$param_language"
  #if [ "$param_language" = "$LANG" ]; then
  #  print_message "当前系统语言是 ${LANG}，无需设置 $param_language"
  #  exit_now 0
  #fi

  # 查看可用语言包【已安装】：en_US.utf8、zh_CN.utf8
  languages_installed="$( locale -a )"
  # 生成语言包（如果未安装）
  if ! echo "$languages_installed" | grep -q "$param_language"; then
    print_message "准备安装语言包"
    if [ -f /etc/locale.gen ]; then
      sudo sed -i "s/^# $param_language/$param_language/" /etc/locale.gen
      sudo locale-gen "$param_language"
    elif command_exists dnf; then
      sudo dnf -y install glibc-langpack-${param_language:0:2}
    elif command_exists yum; then
      sudo yum -y install glibc-common
    else
      exit_now "$global_code_failure" "不支持该系统语言安装"
    fi
  fi

  # 配置默认语言（兼容不同发行版）
  for conf_file in /etc/locale.conf /etc/default/locale; do
    if [ ! -f "$conf_file" ]; then
      continue
    fi
    # todo bak_up
    echo "LANG=$param_language" > "$conf_file"
    # echo "LANG=$param_language" > "$conf_file"
    # echo "LC_ALL=$param_language" >> "$conf_file"
  done

  if command_exists localectl; then
    sudo localectl set-locale "LANG=$param_language"
    # sudo localectl set-locale "LANG=$param_language" "LC_ALL=$param_language"
  fi
  exit_on_code_failure "$?" "系统语言设置失败：${param_language}"
  print_message "系统语言设置成功：$param_language"

  # 配置系统语言与区域格式（Locale）：美式英语
}

chrony_exists(){
  # 包管理器检测
  if command_exists dpkg && dpkg -l chrony 2>/dev/null | grep -q '^ii'; then
      return 0
  elif command_exists rpm && rpm -q chrony >/dev/null 2>&1; then
      return 0
  fi
  return $global_code_failure
}

# 安装NTP服务
chrony_install() {
  print_message "NTP服务：安装 chrony 库"
  if command_exists apt-get; then
    NTP_SERVICE_NAME="chrony"
    NTP_CONF_FILE="/etc/chrony/chrony.conf"
    sudo apt-get update > /dev/null
    sudo apt-get -y install chrony > /dev/null
  elif command_exists yum; then
    NTP_SERVICE_NAME="chronyd"
    NTP_CONF_FILE="/etc/chrony.conf"
    sudo yum -y install chrony > /dev/null
  elif command_exists dnf; then
    NTP_SERVICE_NAME="chronyd"
    NTP_CONF_FILE="/etc/chrony.conf"
    sudo dnf -y install chrony > /dev/null
  else
    exit_now $global_code_failure "不支持该系统"
  fi

  # 备份原配置文件
  curr_time=$(date +"%Y%m%d_%H%M%S")
  cp -p "$NTP_CONF_FILE" "${NTP_CONF_FILE}.bak_${curr_time}"

  # 写入Cloudflare NTP配置
  print_message "NTP服务：配置Cloudflare NTP服务器"
  cat > "$NTP_CONF_FILE" << EOF
# Generated by NTP setup script
server $NTP_SERVER iburst
driftfile /var/lib/chrony/drift
makestep 1.0 3
rtcsync
logdir /var/log/chrony
EOF

  enable_ntp
}

# 启用NTP服务
enable_ntp() {
  print_message "NTP服务：启动并配置开机自启动。"
  systemctl enable --now "$NTP_SERVICE_NAME"
  systemctl restart "$NTP_SERVICE_NAME"

  # 强制同步时钟
  if command_exists chronyc; then
    print_message "NTP服务：强制时钟同步。"
    chronyc waitsync 30 0.01
    chronyc makestep
  fi
}

# 验证时间同步状态
verify_sync() {
    echo -e "\n当前时间配置："
    timedatectl status 2>/dev/null || date -R

    echo -e "\nNTP服务器状态："
    if command -v chronyc >/dev/null; then
        chronyc sources -v
        chronyc tracking
    else
        echo "无法验证同步状态（chronyc不可用）"
    fi
}




# 主流程开始 -------------------------------------------
# ./set_os_locale.sh America/Los_Angeles en_US.utf8
# ./set_os_locale.sh Asia/Shanghai zh_CN.utf8

# 检查 root 权限
if [ "$(id -u)" -ne 0 ]; then
  exit_now "0" "必须使用 sudo 或 root 权限运行此脚本。"
fi
param_tz="$1"
if [ -z "$param_tz" ]; then
  exit_now "$global_code_failure" "时区名称不能为空，请使用正确的时区名称，如：Asia/Shanghai"
fi
param_lang="$2"
if [ -z "$param_lang" ]; then
  exit_now "$global_code_failure" "系统语言不能为空，请使用正确的系统语言格式，如：zh_CN.utf8【中文】、en_US.utf8【英文】"
fi

old_language="$LANG"
old_tz=$(timedatectl | grep "Time zone" | awk '{print $3}')
old_time=$(date "+%Y-%m-%d %H:%M:%S %:z")
print_message "更新前系统环境：---------------------------------------"
locale
timedatectl | grep "Time zone"
print_message ""
print_message ""
date "+%Y-%m-%d %H:%M:%S %:z"

set_os_time_zone "$param_tz"
set_os_language "$param_lang"
print_message "准备调整时间：---------------------------------------"
if ! chrony_exists; then
  chrony_install
fi

print_message ""
print_message ""
print_message "更新后系统环境：---------------------------------------"
locale
timedatectl | grep "Time zone"
date "+%Y-%m-%d %H:%M:%S %:z"

new_language="$LANG"
new_tz=$(timedatectl | grep "Time zone" | awk '{print $3}')
new_time=$(date "+%Y-%m-%d %H:%M:%S %:z")
print_message "系统设置已更新：部分配置需重启系统后生效。"
print_message "1、系统语言更新：${old_language} -> ${param_lang}"
print_message "2、系统时区更新：${old_tz} -> ${param_tz}"
print_message "3、系统时间更新：${old_time} -> ${new_time}"